#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2
LOGGER_FLAGS=""

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

KEEP_M2_CACHE="true"

# create default system.properties for apps that had the jdk vendored in 
if [ -f ${CACHE_DIR}/.jdk/vendor ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

if [ -f ${CACHE_DIR}/system.properties ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  cp ${CACHE_DIR}/system.properties ${BUILD_DIR}/system.properties
fi

if [ ! -d $CACHE_DIR ]; then
  LOGGER_FLAGS="$LOGGER_FLAGS new_java_app"
  logger -p user.notice -t "slugc[$$]" "language_pack_java new_java_app"
  KEEP_M2_CACHE="false"
  if [ ! -f ${BUILD_DIR}/system.properties ]; then 
    echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties; 
  fi
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java retain_m2_repo"
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# install JDK 
if [ -f ${BUILD_DIR}/system.properties ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
  LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
  javaVersion=$(detect_java_version ${BUILD_DIR})
  echo -n "-----> Installing OpenJDK ${javaVersion}..."
  install_java ${BUILD_DIR} ${javaVersion}
  jdk_overlay ${BUILD_DIR}
  echo "done"
  cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
fi

# change to cache dir to install maven
cd $CACHE_DIR

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/maven.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven 3.0.3..."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

MAVEN_SETTINGS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/settings.xml"

echo -n "-----> Installing settings.xml..."
if [ -f .m2/settings.xml ]; then
  rm .m2/settings.xml 
fi
curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
echo " done"

# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx512m"

# build app
BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository -s $CACHE_DIR/.m2/settings.xml -DskipTests=true clean install"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

#copy .m2 and .maven if needed
if [ "true" == $KEEP_M2_CACHE ]; then
  for DIR in ".m2" ".maven" ; do
    cp -r $CACHE_DIR/$DIR $DIR
  done
fi

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_end $LOGGER_FLAGS"

#compile node


# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
SCONS_VERSION="1.2.0"
S3_BUCKET="heroku-buildpack-nodejs"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function manifest_versions() {
  curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.${1}" -s -o - | tr -s '\n' ' '
}

function resolve_version() {
  available_versions="$1"
  requested_version="$2"
  default_version="$3"

  if [ "$2" == "" ]; then
    echo $3
  else
    args=""
    for version in $available_versions; do args="${args} -v \"${version}\""; done
    for version in $requested_version; do args="${args} -r \"${version}\""; done
    evaluated_version=$(eval $bootstrap_node/bin/node $LP_DIR/vendor/node-semver/bin/semver ${args} || echo "")
    echo "$evaluated_version" | tail -n 1
  fi
}

function package_engine_version() {
  version=$(cat $BUILD_DIR/package.json | $bootstrap_node/bin/node $LP_DIR/vendor/json/json engines.$1 2>/dev/null)
  if [ $? == 0 ]; then
    echo $version | sed -e 's/\([<>=]\) /\1/g'
  fi
}

function package_resolve_version() {
  engine="$1"
  resolved_version=$(resolve_version "${engine_versions[$engine]}" "${engine_requests[$engine]}" "${engine_defaults[$engine]}")

  if [ "${resolved_version}" == "" ]; then
    error "Requested engine $engine version ${engine_requests[$engine]} does not match available versions: ${engine_versions[$engine]}"
  else
    echo $resolved_version
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

bootstrap_node=$(mktmpdir bootstrap_node)
package_download "nodejs" "0.4.7" $bootstrap_node

# make some associative arrays
declare -A engine_versions
declare -A engine_defaults
declare -A engine_requests

engine_defaults["node"]="0.4.7"
engine_defaults["npm"]="1.0.106"

engine_versions["node"]=$(manifest_versions "nodejs")
engine_requests["node"]=$(package_engine_version "node")

engine_versions["npm"]=$(manifest_versions "npm")
engine_requests["npm"]=$(package_engine_version "npm")

echo "-----> Resolving engine versions"

# add a warning if no version of node specified
if [ "${engine_requests["node"]}" == "" ]; then
  echo
  echo "WARNING: No version of Node.js specified in package.json, see:" | indent
  echo "https://devcenter.heroku.com/articles/nodejs-versions" | indent
  echo
  echo "WARNING: The default version of Node.js and npm on Heroku will begin" | indent
  echo "tracking the latest stable release starting September 1, 2012."  | indent
  echo
fi

NODE_VERSION=$(package_resolve_version "node")
echo "Using Node.js version: ${NODE_VERSION}" | indent

NPM_VERSION=$(package_resolve_version "npm")
echo "Using npm version: ${NPM_VERSION}" | indent

# cache directories
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION/$NPM_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

# s3 packages
NODE_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nodejs-${NODE_VERSION}.tgz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
package_download "scons" "${SCONS_VERSION}" "${VENDORED_SCONS}"

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

# install dependencies with npm
echo "-----> Installing dependencies with npm"
run_npm "install --production"
run_npm "rebuild"
echo "Dependencies installed" | indent

echo "-----> Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh
